#!/usr/bin/gawk -f
#
# pomoreport
#   time-spent report generator inspired by pomodoro technique,
#   includes relevance and execution metrics, colored terminal report
#
# description:
#   - work on tasks by intervals (see 'pomotimer') (25m, alter in p2h())
#   - enter tasks in simple text files (see 'format:')
#   - organize files in dir tree by days, weeks, etc (see 'pomoinit')
#   - tell preport how relevant each task is (see '.ptaskrc')
#   - feed entered log files to pomoreport on stdin (see 'usage:')
#   - pomoreport generates metrics on stdout
#
# notes:
#   - hardcoded intervals and match patterns (until someone else uses it ;-)
#   - execution rate very simple, only r/w subtask quantity, no time weight
#
# todo:
#   - weigh reads and writes by n intervals of parent, not just rw quantity
#   - option to summarize unfinished tasks rather than grepping for them
#   - options to alter reporting output (eg colors)
#   - environment, rcfile, command line specified constants (eg pomo interval)
#   - store time remaining: label/12/10r -> 300m done, 10m until interval ends
#   - audit code to allow eg 1m intervals for simple tracking, sans pomodoro
#   - option to filter only by specific tasks, instead of what we do now:
#       for f in $(grep -l ^housing 2015*); do awk '/^housing/ {
#         do { print; if (!getline) break; }
#         while (NF > 0); printf("\n")
#       }' < $f; done
#
# scott@smemsh.net
# https://github.com/smemsh/pomoutils/
# https://spdx.org/licenses/GPL-2.0
#
##############################################################################

BEGIN {

	#
	# overloaded enum, used for:
	#
	# - relevance[] correlate (parsed from ptaskrc db)
	# - tasks[task][] counters
	# - tasks[task][RELVNC] correlate
	# - totals[] counters
	#
	# the ptaskrc values are defined and used by
	# the input database with fixed constant values
	#
	# NOTE: we canot start with '0' because we test for
	# unset to see if the ptaskrc file is missing a
	# relevance definition for a task
	#
	UNRELATED = 1
	INDIRECT = 2
	DIRECT = 3
	#
	POMOS = 4
	READS = 5
	WRITES = 6
	UNFINS = 7
	#
	RELVNC = 8

	# 256-color indices used for output colorization
	# TODO: add stable URL for a lookup chart, or man ref
	#
	colors[DIRECT] = 14
	colors[INDIRECT] = 69
	colors[UNRELATED] = 66

	# used to avoid running END block on premature exit
	#
	cleanexit = 1

	# now read in mapping database for ptask relevance
	# format: "^[123][[:blank:]]+[a-z]+$"
	# blanks and lines beginning with '#' are ignored
	#
	if (!(POMORCFILE = ENVIRON["POMORCFILE"])) {
		printf("ptaskrc error: %s\n", "dne")
		abort_exit()
	}

	while (ret = (getline < POMORCFILE)) {
		if (ret == -1) {
			printf("ptaskrc error: %s\n", ERRNO)
			abort_exit()
		}
		if (NF > 0 && $1 !~ /^#/)
			relevance[$2] = $1
	}
}

### UTIL #####################################################################

function print_color_start() { printf("\033[38;5;") }
function print_color_end() { printf("m") }
function reset_color() { printf("\033[0m") }
function abort_exit() { cleanexit = 0; exit; }

function \
start_color(relevance) \
{
	print_color_start()
	printf(colors[relevance])
	print_color_end()
}

# TODO: do something with relvnc
# TODO: this template is same as summary line, should be
#       factored into a constant (or better: summary should use us)
#
function \
printsum(task, nrtasks, reads, writes, unfins, relvnc) \
{
	start_color(relvnc)
	printf("%-15s %4u %6.1fh", task, nrtasks, p2h(nrtasks))
	reset_color()

	if (reads) printf("%4ur", reads); else printf("     ")
	if (writes) printf("%4uw", writes); else printf("     ")
	if (unfins) printf("%4uu", unfins); else printf("     ")

	printf("\n")
}

# array sort callback equality comparator
# uses task count as values to compare
#
function \
task_cmp(idx1, val1, idx2, val2, \
	 nr1, nr2) \
{
	nr1 = tasks[idx1][POMOS]
	nr2 = tasks[idx2][POMOS]
	return -(nr1 - nr2)
}

function \
p2h(pomos) \
{
	return (pomos * 25) / 60
}

function \
draw_separator_line() \
{
	# write the summary separator line using VT100 chars
	#
	printf("\033(0") # start box-draw escape
	for (i = 0; i < 72; i++)
		printf("\x71")
	printf("\033(B") # end box-draw escape
	printf("\n")
}

### PARSE ####################################################################

# for each task record delimiter in the input, we do some
# houskeeping and adds the pomocount (present in the delim),
# then prepare to count through task bullets until we see
# another new task delimiter
#
match($0, /^([[:alpha:]]+)\/([[:digit:]]+)$/, line) {
	curtask = line[1]
	count = line[2]
	tasks[curtask][POMOS] += count
	next
}

# bullets within a task increment read/write/unfinished counters
# TODO 'next' is unnecessary, no?
#
char = substr($0, 0, 1) {
	switch (char) {
		case "+": tasks[curtask][READS]++; next;
		case "-": tasks[curtask][WRITES]++; next
		case "\\": tasks[curtask][UNFINS]++; next;
	}
}

### REPORT ###################################################################

END {
	if (!cleanexit) {
		printf("premature exit\n")
		exit
	}

	# iterate through the task array in order determined
	# by pomo task count (highest to lowest)
	#
	PROCINFO["sorted_in"] = "task_cmp"

	# total up all the counters for each task and print
	# each one, sorted by task count (via "sorted_in")
	#
	for (task in tasks) {

		nrtasks		= tasks[task][POMOS]
		writes		= tasks[task][WRITES]
		reads		= tasks[task][READS]
		unfins		= tasks[task][UNFINS]
		relvnc		= relevance[task]

		if (!relvnc) {
			printf("unknown task '%s' marked irrelevant\n", task)
			tasks[task][RELVNC] = UNRELATED
		} else
			tasks[task][RELVNC] = relvnc

		totals[POMOS]	+= nrtasks
		totals[READS]	+= reads
		totals[WRITES]	+= writes
		totals[UNFINS]	+= unfins
		totals[relvnc]	+= nrtasks

		printsum(task, nrtasks, reads, writes, unfins, relvnc)
	}

	draw_separator_line()

	allpomos  = totals[POMOS]
	allreads  = totals[READS]
	allwrites = totals[WRITES]
	allunfins = totals[UNFINS]

	alldirect = totals[DIRECT]
	allindir  = totals[INDIRECT]
	allirrel  = totals[UNRELATED]

	readwrites = allreads + allwrites
	execution = (allwrites / (readwrites? readwrites: 1)) * 100.0
	relevant = alldirect + allindir

	printsum("direct:", alldirect, 0, 0, 0, DIRECT)
	printsum("indirect:", allindir, 0, 0, 0, INDIRECT)
	printsum("irrelevant:", allirrel, 0, 0, 0, UNRELATED)

	draw_separator_line()

	printsum("total:", allpomos, allreads, allwrites, allunfins, 0)
	printsum("relevant:", relevant, 0, 0, 0, 0)
	if (execution)
	#       	12345678901234567890
		printf("execution:             %4.1f%%\n", execution)


	# and all the final totals
	#
	#       12345678901234567890
	#printf("intervals:      %4u %6.1fh\n" \
	#       "relevance:      %4u %6.1fh, " \
	#			"%3u / %3u / %3u, " \
	#			"%5.1fh / %5.1fh / %5.1fh\n" \
	#       "execution:             %4.1f%%, %u reads, %u writes\n" \
	#       "unfinished:     %4u\n", \
	#       allpomos, p2h(allpomos), \
	#       relevant, p2h(relevant), \
	#         alldirect, allindir, allirrel, \
	#         p2h(alldirect), p2h(allindir), p2h(allirrel), \
	#       execution, allreads, allwrites, \
	#       allunfins \
	#)
}
